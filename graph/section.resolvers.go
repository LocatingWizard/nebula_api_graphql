package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"os"

	"github.com/LocatingWizard/nebula_api_graphql/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

// CourseReference is the resolver for the course_reference field.
func (r *sectionResolver) CourseReference(ctx context.Context, obj *model.Section) (*model.Course, error) {
	coll := r.DB.Collection(os.Getenv("COURSES_COLL_NAME"))

	oid := obj.CourseReference

	filter := bson.D{{"_id", oid}}
	var result *model.Course
	err := coll.FindOne(ctx, filter).Decode(&result)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return result, nil
}

// Professors is the resolver for the professors field.
func (r *sectionResolver) Professors(ctx context.Context, obj *model.Section) ([]*model.Professor, error) {
	coll := r.DB.Collection(os.Getenv("PROFESSORS_COLL_NAME"))
	var out []*model.Professor
	for _, oid := range obj.Professors {
		filter := bson.D{{"_id", oid}}
		var result *model.Professor
		err := coll.FindOne(ctx, filter).Decode(&result)
		if err != nil {
			return nil, err
		}
		out = append(out, result)
	}

	return out, nil
}

// Section returns SectionResolver implementation.
func (r *Resolver) Section() SectionResolver { return &sectionResolver{r} }

type sectionResolver struct{ *Resolver }
